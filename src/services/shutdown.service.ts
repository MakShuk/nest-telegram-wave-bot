import { Injectable, Logger, OnApplicationShutdown } from '@nestjs/common';
import { IntervalTaskService } from './interval-task.service';

@Injectable()
export class ShutdownService implements OnApplicationShutdown {
  private readonly logger = new Logger(ShutdownService.name);

  constructor(
    private readonly intervalTaskService: IntervalTaskService,
  ) {}

  async onApplicationShutdown(signal?: string) {
    this.logger.log(`üõë Application shutdown initiated by ${signal || 'unknown signal'}`);
    
    try {
      // 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö cron –∑–∞–¥–∞—á
      this.logger.log('‚èπÔ∏è Stopping all interval tasks...');
      this.intervalTaskService.stopAllTasks();
      
      // 2. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
      this.logger.log('‚è≥ Waiting for active operations to complete...');
      await this.waitForActiveOperations();
      
      this.logger.log('‚úÖ Graceful shutdown completed successfully');
    } catch (error) {
      this.logger.error(`‚ùå Error during graceful shutdown: ${error.message}`);
      throw error;
    }
  }

  private async waitForActiveOperations(): Promise<void> {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π, –∞–∫—Ç–∏–≤–Ω—ã—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Ç.–¥.
    return new Promise((resolve) => {
      setTimeout(resolve, 1000); // –î–∞–µ–º 1 —Å–µ–∫—É–Ω–¥—É –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    });
  }
}