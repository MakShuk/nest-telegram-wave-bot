import { Inject, Injectable, Logger, OnApplicationShutdown } from '@nestjs/common';
import { Context, Telegraf } from 'telegraf';
import { message } from 'telegraf/filters';
import { CustomLoggingService } from '../common/logging.service';

/** –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π */
type MessageCallback = (ctx: Context) => Promise<void>;
/** –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π */
type MessageHandler = (callback: MessageCallback) => void;

/** –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏ */
interface ErrorDetails {
  /** –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞, –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ */
  method: string;
  /** –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ */
  error: Error;
  /** –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */
  context?: any;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ Telegraf
 * @class TelegrafService
 */
@Injectable()
export class TelegramActionsService implements OnApplicationShutdown {
  private readonly logger = new Logger(TelegramActionsService.name);

  /**
   * @param bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
   * @param loggingService - –°–µ—Ä–≤–∏—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  constructor(
    @Inject('TELEGRAM_BOT_INSTANCE')
    private readonly bot: Telegraf<Context>,
    private readonly loggingService: CustomLoggingService,
  ) {
    this.setupErrorHandler();
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –≤ —Å–µ—Ä–≤–∏—Å–µ
   * @param details - –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
   * @private
   */
  private handleError(details: ErrorDetails): void {
    const { method, error, context } = details;
    this.logger.error(
      `Error in ${method}: ${error.message}`,
      error.stack,
      context,
    );
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –±–æ—Ç–∞
   * @private
   */
  private setupErrorHandler(): void {
    this.bot.catch((error: Error, ctx: Context) => {
      this.handleError({
        method: 'global',
        error,
        context: ctx.update,
      });
    });
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   * @param method - –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞
   * @param callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
   * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
   * @private
   */
  private async executeHandler(
    method: string,
    callback: MessageCallback,
    ctx: Context,
  ): Promise<void> {
    const startTime = Date.now();
    const userId = ctx.from?.id?.toString();
    const chatId = ctx.chat?.id?.toString();

    try {
      this.logger.debug(`Executing ${method}`);
      await callback(ctx);
      
      const duration = Date.now() - startTime;
      this.loggingService.recordPerformanceMetric(`telegram_${method}`, duration, {
        userId,
        chatId,
        success: true
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç–¥–µ–ª—å–Ω–æ
      if (method.startsWith('command:')) {
        const command = method.replace('command:', '');
        this.loggingService.logTelegramCommand(command, userId, chatId, true);
      }

    } catch (error) {
      const duration = Date.now() - startTime;
      this.loggingService.recordPerformanceMetric(`telegram_${method}`, duration, {
        userId,
        chatId,
        success: false,
        error: true
      });

      this.handleError({
        method,
        error: error as Error,
        context: ctx.update,
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
      if (method.startsWith('command:')) {
        const command = method.replace('command:', '');
        this.loggingService.logTelegramCommand(command, userId, chatId, false);
      }

      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
   * @param command - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
   * @param callback - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
   * @throws {Error} –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—É—Å—Ç–∞—è
   */
  public createCommand(command: string, callback: MessageCallback): void {
    if (!command?.trim()) {
      throw new Error('Command cannot be empty');
    }

    this.bot.command(command, (ctx) =>
      this.executeHandler('command:' + command, callback, ctx),
    );
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
   * @param type - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
   * @private
   */
  private createMessageHandler(type: string): MessageHandler {
    return (callback: MessageCallback) => {
      this.bot.on(message(type as any), (ctx) =>
        this.executeHandler(`message:${type}`, callback, ctx),
      );
    };
  }

  /** –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π */
  public readonly textMessage = this.createMessageHandler('text');
  /** –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π */
  public readonly voiceMessage = this.createMessageHandler('voice');
  /** –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */
  public readonly imageMessage = this.createMessageHandler('photo');
  /** –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ */
  public readonly fileMessage = this.createMessageHandler('document');

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –∫–Ω–æ–ø–æ–∫
   * @param action - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ)
   * @param callback - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è
   * @throws {Error} –ï—Å–ª–∏ action –ø—É—Å—Ç–æ–π (–¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)
   */
  public async buttonAction(
    action: string | RegExp,
    callback: MessageCallback,
  ): Promise<void> {
    if (typeof action === 'string' && !action?.trim()) {
      throw new Error('Action cannot be empty');
    }

    this.bot.action(action, (ctx) =>
      this.executeHandler('button:' + action.toString(), callback, ctx),
    );
  }

  /**
   * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Telegram –±–æ—Ç–∞
   * @param signal - –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  async onApplicationShutdown(signal?: string) {
    this.logger.log(`üõë Shutting down Telegram bot due to ${signal || 'unknown signal'}`);
    
    try {
      // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
      await this.bot.stop();
      this.logger.log('‚úÖ Telegram bot stopped successfully');
    } catch (error) {
      this.logger.error(`‚ùå Error stopping Telegram bot: ${error.message}`);
      throw error;
    }
  }
}
